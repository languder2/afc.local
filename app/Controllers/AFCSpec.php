<?php

namespace App\Controllers;

use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;
use App\Models\AFCModel;

class AFCSpec extends BaseController
{
    protected array $data;
    protected array $dates;
    protected array $datesFull;

    private AFCModel $afc;

    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger):void
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->afc = model(AFCModel::class);
        $this->dates = $this->model->get_dates('2024-06-20', date("Y-m-d"), "d.m");
        $this->datesFull = $this->model->get_dates('2024-06-20', date("Y-m-d"), "Y-m-d");
    }

    public function list(): string
    {
        /* get forms */
        $forms= $this->db
            ->table("edForms")
            ->get()
            ->getResult();

        $this->model->setArrayKey($forms);

        /* get levels */
        $levels= $this->db
            ->table("edLevels")
            ->orderBy("sort","ASC")
            ->get()
            ->getResult();

        $this->model->setArrayKey($levels);

        /* get specialities */
        $specs= [];
        foreach ($levels as $level){
            $specs[$level->id]= (object)[
                "level" =>  $level,
                "list"  =>  $this->db
                    ->table("edSpecs")
                    ->select("*, dataSpec.cnt as total")
                    ->join(
                        "dataSpec",
                        "dataSpec.op=edSpecs.id",
                        "left"
                    )
                    ->where("edLevel", $level->id)
                    ->where("places>", 0)
                    ->where("dataSpec.day","all")
                    ->orderBy("name")
                    ->orderBy("profile")
                    ->orderBy("profile")
                    ->orderBy("edForm")
                    ->get()
                    ->getResult()
            ];

            $this->model->replacementByRefers($specs[$level->id]->list,"edForm",$forms);

            $this->afc->buildSpecsTree($specs[$level->id]->list);

        }
        /* show specialities */
        $pageContent= view("public/AFC/Specs/List",[
            "list"          => $specs,
        ]);


        $includes=(object)[
            'js'=>[
                "js/public/specs-filter.js"
            ],
            'css'=>[
                "css/public/spec-list.css"
            ],
        ];

        return view("public/page",[
            "pageContent"   =>  $pageContent,
            "includes"      =>  $includes,
        ]);
    }

    public function detail($type,$id):string
    {

        $forms= $this->db
            ->table("edForms")
            ->get()
            ->getResult();

        $forms= $this->model->prepareList($forms,"id");

        $specs= $this->db
            ->table("edSpecs")
            ->select("id,code,edForm,edLevel,places,name,profile")
            ->where($type,$id)
            ->get()
            ->getResult();

        $spec= reset($specs);
        $dates= [];

        $max= 0;

        $datasets= [];

        foreach ($specs as $spec){
            $data= $this->db
                ->table("dataSpec")
                ->select("*")
                ->where("op",$spec->id)
                ->get()
                ->getResult();

            $spec->data= (object)[
                "total" => [],
                "pr1"   => [],
                "list"  => []
            ];

            $dates= [];
            foreach ($data as $day){
                $spec->data->list[$day->day] = $day;
                if($day->day == "all") continue;
                $spec->data->total  [] = $day->cnt;
                $spec->data->pr1    [] = $day->pr1;
                $dates              [] = $day->day;
            }

            $max= (max($spec->data->total)>$max)?max($spec->data->total):$max;

            $spec->datasets[] = (object)[
                "label" => "Всего",
                "color" => "#001AFF",
                "list"  => json_encode($spec->data->total,JSON_NUMERIC_CHECK|JSON_UNESCAPED_UNICODE)
            ];

            $spec->datasets[] = (object)[
                "label" => "Приоритет 1",
                "color" => "#820000",
                "list"  => json_encode($spec->data->pr1,JSON_NUMERIC_CHECK|JSON_UNESCAPED_UNICODE)
            ];
            $spec->chart= view("public/AFC/ChartDetailsSpec",[
                "cid"           => "$spec->id",
                "edForm"        => $forms[$spec->edForm]->name,
                "legend"        => null,
                "labels"        => json_encode($dates,JSON_NUMERIC_CHECK|JSON_UNESCAPED_UNICODE),
                "datasets"      => $spec->datasets,
                "spec"          => $spec,
                "max"           => $max,
                "width"         => "100%",
                "height"        => (count($specs)==1)?"30vh":"30vh",
            ]);
        }



        $charts= [];
        foreach ($specs as $spec)
            $charts[]= $spec->chart;

        $pageContent= view("public/AFC/DetailsSpec",[
            "charts"      => $charts,
        ]);

        $includes=(object)[
            'js'=>[
            ],
            'css'=>[
                "css/public/details.css"
            ],
        ];

        return view("public/page",[
            "pageContent"   =>  $pageContent,
            "includes"      =>  $includes,
        ]);
    }

}